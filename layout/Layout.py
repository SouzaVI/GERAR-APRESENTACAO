# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GerarApresentacao
                                 A QGIS plugin
 Gera Apresentação Padrão Terram
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-20
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Igor Viana Souza - Terram Soluções Agronômicas
        email                : igor.souzavigor@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .Layout_dockwidget import GerarApresentacaoDockWidget
import os.path


class GerarApresentacao:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GerarApresentacao_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Gerar Apresentação')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GerarApresentacao')
        self.toolbar.setObjectName(u'GerarApresentacao')

        #print "** INITIALIZING GerarApresentacao"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GerarApresentacao', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Layout/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING GerarApresentacao"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD GerarApresentacao"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Gerar Apresentação'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
    
    def HabilitarCheckBox(self):

        if self.dockwidget.checkBoxLavoura.isChecked() == True and self.dockwidget.checkBoxAbertura.isChecked() == True:
        #bloco será executado somente se o QCheckBox estiver marcado
           
            self.dockwidget.checkBoxNameFileLavoura.setEnabled(True)
            self.dockwidget.checkBoxNameFileAbertura.setEnabled(True)
        else:
            self.dockwidget.checkBoxNameFileLavoura.setEnabled(False)
            self.dockwidget.checkBoxNameFileAbertura.setEnabled(False)
            
    def ExtrairDtu(self):
        import shutil
        import zipfile
        import pyodbc
        import pandas as pd
        from os import path
        import uuid
        import os
     '''
      Retorna: executar função de descompactação de DTU, Função implementada para o botão pushButtonDtu
     '''   

        def __get_list_files__(diretorio, list_extensions):
         '''
         Essa função, chamada __get_list_files__, tem a finalidade de listar arquivos com extensões específicas em um diretório e suas subpastas recursivamente.
         Parâmetros: Diretorio (O diretório inicial onde a busca de arquivos será realizada)  e list_extensions (Uma lista de extensões de arquivo que você deseja procurar)
         Retorna: retorna a lista lst_dir, que contém os caminhos de todos os arquivos encontrados no diretório e suas subpastas.
        '''
            lst_dir = []
            tot = 0
            subpastas =[]
            if os.path.isdir(diretorio):
                items = os.listdir(diretorio)
                for item in items:
                    novo_item = os.path.join(diretorio,item)
                    if os.path.isdir(novo_item):
                        subpastas.append(novo_item)
                    elif novo_item.lower().endswith(list_extensions):
                        if novo_item not in lst_dir:
                            lst_dir += [novo_item]
        #                    clear_output(wait=True)
                            tot =tot+1
                            print ('TOTAL DE ARQUIVOS: ', str(tot))
                            print ('LENDO O ARQUIVO: ')
                            print (lst_dir[len(lst_dir)-1])
                    for subpasta in subpastas:
                        lst_dir += __get_list_files__(subpasta,list_extensions)
                #lst_dir =[dict(t) for t in {tuple(d.items()) for d in lst_dir}]
                #lst_dir=list(dict.fromkeys(lst_dir))
                lst_dir=list(set(lst_dir))
                return lst_dir

        def __create_folder__(my_dir:str):
         '''
          tem a finalidade de criar uma estrutura de diretórios em um caminho específico, onde os diretórios são definidos com base na string fornecida como my_dir
          Parâmetros :  my_dir, que é uma string representando o caminho do diretório que você deseja criar.
          Retorna: Após a conclusão do loop, a estrutura de diretórios definida pelo caminho my_dir foi criada, com cada diretório individual criado conforme necessário. 
         '''
            path = my_dir
            new_path=''
            if not os.path.isdir(path):
                list_folder = path.split("\\")
                for idx,new_folder in enumerate(list_folder):
                    if idx <= len(list_folder):
                        if idx ==0:
                            new_path = new_folder +'\\'
                        else:
                            new_path = new_path + '\\'
                        if not os.path.isdir(new_path):
                            os.mkdir(new_path)

        def __create_temp_folder__(my_strig:str):
         '''
         cria uma pasta temporária (temp folder) com o nome especificado em my_strig.
         '''
            if not os.path.isdir(my_strig):
                os.mkdir(my_strig)
                #os.mkdir('c:\\temp_sst\\'+my_strig)


        def __return_pandas_database__(my_dir):
         '''
          responsável por conectar-se a um banco de dados Microsoft Access (.mdb ou .accdb) localizado em um diretório especificado por my_dir, executar uma consulta SQL nesse banco de dados e retornar os resultados como um DataFrame do Pandas. 
          Parâmetros: diretório especificado por my_dir
          Retorna: DataFrame data contendo os resultados da consulta é retornado como resultado da função. O usuário que chama essa função receberá os dados em formato de DataFrame, que é uma estrutura de dados tabular do Pandas.
         
         '''
            conn = pyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=' +my_dir + '\\DTUMeta.mdb;')
            my_query = 'SELECT\
                          Client.Group AS CLIENTE,\
                          Farm.Group AS FAZENDA,\
                          Themes.Name AS NOME_ARQUIVO,\
                          Themes.SrcFile AS DIR_ANO,\
                          ThemeType.ThemeType AS TIPO,\
                          FileInfo.NewName AS NOME_REAL,\
                          Field.Group AS NOME_BLOCO \
                    FROM\
                          Client , Farm , Themes, Field, ThemeType,FileInfo\
                    WHERE\
                          (([Client].ClientID = [Farm].ClientID) AND\
                          ([Farm].FarmID = [Field].FarmID) AND\
                          ([Field].FieldID = [Themes].FieldID) AND\
                          ([ThemeType].TTID = [Themes].TTID) AND\
                          ([Themes].ThemeID = [FileInfo].FileID) AND\
                          ([Client].ClientID = [FileInfo].ClientID))\
                    ORDER BY Client.Group, Farm.Group, Themes.Name ASC'
            with conn:
                data = pd.read_sql(my_query,conn)
            return data

       

        def __extract_mdb__(dir_sst:str):
         '''
          responsável por extrair dados de um arquivo ZIP localizado em dir_sst, que supostamente contém um arquivo Microsoft Access Database (.mdb). 
          Parâmetro: dir_sst,  Uma string que representa o caminho para o arquivo ZIP que contém o arquivo MDB a ser extraído e lido.
          Retorno: Um DataFrame do Pandas contendo os dados lidos do arquivo MDB extraído do arquivo ZIP.
         '''
            if "\\" in dir_sst:
                temp_sep = "\\"
            else:
                temp_sep = "/"
            list_folder = dir_sst.split(temp_sep)
            len_total = len(dir_sst)
            my_diretory = dir_sst[0:len_total-len(list_folder[len(list_folder)-1])]
            my_uuid = str(uuid.uuid4())
            temp_dir = my_diretory+temp_sep+'temp_sst'+temp_sep+my_uuid
            dados_sst = zipfile.ZipFile(dir_sst)
            list_files_sst = dados_sst.namelist()
            __create_temp_folder__(my_uuid)
            if 'DTUMeta.mdb' in list_files_sst:
                dados_sst.extract('DTUMeta.mdb',temp_dir)
                dados = __return_pandas_database__(temp_dir)
            return dados

        def __arruma_pandas__(my_data_frame,temp_sep):
         '''
         Organiza o dataframe
         '''
            data_frame = my_data_frame
            data_frame['ANO'] = data_frame['DIR_ANO'].str.split(pat="\\")[0][0]
            data_frame['NOME_REAL'] = data_frame['NOME_REAL']
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace('-', '_')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace(' ', '_')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace('.', '_')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace('___', '_')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace('__', '_')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO'].str.replace('0_cm', '0')
            data_frame['NOME_ARQUIVO'] = data_frame['NOME_ARQUIVO']
            data_frame['COVERSAO'] = data_frame['NOME_REAL']+"|"+ data_frame['NOME_ARQUIVO']
            
            data_frame['DIRETORIO'] = temp_sep+data_frame['CLIENTE']+temp_sep
                                       
            data_frame.drop('CLIENTE', inplace=True, axis=1)
            data_frame.drop('FAZENDA', inplace=True, axis=1)
            data_frame.drop('NOME_ARQUIVO', inplace=True, axis=1)
            data_frame.drop('DIR_ANO', inplace=True, axis=1)
            data_frame.drop('TIPO', inplace=True, axis=1)
            data_frame.drop('NOME_REAL', inplace=True, axis=1)
            data_frame.drop('ANO', inplace=True, axis=1)
            data_frame.drop('NOME_BLOCO', inplace=True, axis=1)
           
            return data_frame


        def __rename_file_zip__(diretorio,temp_df):
         '''
         responsável por renomear arquivos em um diretório com base em informações contidas em um DataFrame temp_df. Vou explicar os parâmetros e o que a função faz:
         Parâmetros: diretorio e temp_df
        '''
            names = temp_df['COVERSAO'].tolist()
            temp = __return_dir__(diretorio)
            diretorio = temp+ temp_df['DIRETORIO'][0]
            print(diretorio)
            if os.path.isdir(diretorio):
                items = os.listdir(diretorio)
                for idx, item in enumerate(items):
                    name_item = item.split(".")[0]
                    ext_item = item.split(".")[1]
                    for name in names:
                        old_name = name.split("|")[0]
                        new_name = name.split("|")[1]
                        if old_name == name_item:
                            num_cont=0
                            while path.exists(diretorio+new_name+"."+ext_item):
                                if num_cont ==0:
                                    num_cont = num_cont+1
                                    new_name = new_name +"("+str(num_cont)+")"
                                else:
                                    num_cont = num_cont+1
                                    new_name = new_name.split("(")[0]
                                    new_name = new_name +"("+str(num_cont)+")"
                            os.rename(diretorio+item, diretorio+new_name+"."+ext_item)


        def __return_dir__(directory_file_sst:str):
         '''
          função que recebe uma string directory_file_sst como argumento e retorna uma versão modificada dessa string.
          Parâmetros: directory_file_sst (string), Esta é a string que a função recebe como entrada. Presumivelmente, deve conter um caminho de diretório que pode usar barras invertidas (\) ou barras normais (/) como separadores.
          Retorno:  função retorna uma string que representa o diretório pai do caminho especificado em directory_file_sst. Isso significa que ele remove o último elemento (geralmente um nome de arquivo) do caminho fornecido e retorna apenas o caminho do diretório que o contém.
         '''
            if "\\" in directory_file_sst:
                temp_list = directory_file_sst.split("\\")
                temp_sep = "\\"
            else:
                temp_list = directory_file_sst.split("/")
                temp_sep = "/"
            temp=""
            for idx, item in enumerate(temp_list):
                if idx <= len(temp_list)-2:
                    if temp =="":
                        temp = item
                    else:
                        temp = temp+temp_sep+item
            return temp
        print(__return_dir__('C:/geoprocessamento/FERTILIDADE'))

        def __create_folder_structure__(dir_sst, df_temp, my_zip_memory):
         '''
         a função que cria uma estrutura de diretórios, extrai arquivos de um objeto ZIP para essa estrutura de diretórios e retorna o diretório onde os arquivos foram extraídos.
         Parâmetros: dir_sst, df_temp, my_zip_memory 
         Retorno: A função retorna uma string que representa o diretório onde os arquivos do objeto my_zip_memory foram extraídos.
        '''
            temp = __return_dir__(dir_sst)
            if "\\" in dir_sst:
                temp_sep = "\\"
            else:
                temp_sep = "/"
            diretorio = temp + temp_sep + df_temp['DIRETORIO'][0]
            __create_folder__(diretorio)
            my_zip_memory.extractall(diretorio)
            return diretorio

        

        def descompatar_sst(dados):
         '''
         A função tem a finalidade de realizar uma série de operações, descompactando o conteúdo desse arquivo ZIP e organizando-o em uma estrutura de pastas específica. 
         Parâmetros: Dados
         Retorno: Retorna o caminho para o diretório onde os dados extraídos foram organizados.
         '''
            dados_sst = zipfile.ZipFile(dados)
            if "\\" in dados:
                temp_sep = "\\"
            else:
                temp_sep = "/"
            df_temp = __arruma_pandas__(__extract_mdb__(dados),temp_sep)
            diretorio=__create_folder_structure__(dados, df_temp, dados_sst)
            __rename_file_zip__(dados,df_temp)
            return diretorio

        def descompactar_varios_dtus(my_folder:str):
         '''
         A função tem a finalidade de realizar uma série de operações, descompactando o conteúdo desse arquivo ZIP e organizando-o em uma estrutura de pastas específica.
         Parâmetros: my_folder
         Retorno: Retorna o caminho para o diretório onde os dados extraídos foram organizados. 
         '''
            list_files= __get_list_files__(my_folder,('.sst'))
            print(list_files)
            for idx, item in enumerate(list_files):
                diretorio=descompatar_sst(item)
            return diretorio    


        caminho_arquivos = descompactar_varios_dtus('C:/geoprocessamento/FERTILIDADE')
        '''
        Mensagem de conclusão da função descompactar
        '''
        from PyQt5.QtWidgets import QMessageBox
        # Exibindo a caixa de diálogo após a conclusão da função
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Processo Concluído")
        msg_box.setText("O processo de descompactação foi finalizado com sucesso!")
        msg_box.setIcon(QMessageBox.Information)
        msg_box.exec_()
        
    def GerarLayout(self):
     '''
     Retorna: executar função de descompactação de DTU, Função implementada para o botão pushButtonGerarLayout
     '''
    
        from qgis.core import QgsVectorLayer, QgsProject, QgsLayoutSize, QgsUnitTypes, QgsLayoutPoint, QgsLayoutItemLegend, QgsLegendStyle, QgsLayoutItemMap, QgsPrintLayout, QgsAggregateCalculator,  QgsExpression, QgsExpressionContext, QgsAggregateCalculator, QgsExpression,QgsExpressionContext, edit
        from PyQt5.QtGui import QColor, QFont
        from qgis.utils import iface
        from qgis.core import QgsField, QgsVectorLayer, QgsFeature, QgsExpression, QgsExpressionContext
        from PyQt5.QtCore import QVariant
     
        
        self.pasta = self.dockwidget.mQgsFileWidgetDtu.filePath()
        shapefile_dir = self.pasta

        def ChamarLayerLayout(shapefile_dir, name=str, estilo=str):
         '''
         Parâmetros: shapefile_dir, O diretório onde o arquivo shapefile está localizado; name, O nome do arquivo shapefile (sem a extensão ".shp"); estilo, O nome do arquivo de estilo que será aplicado ao shapefile. Esse arquivo de estilo deve estar localizado no diretório "C:/geoprocessamento/estilos/".
         Retorno: A função não retorna um valor explícito. Em vez disso, ela executa uma série de ações, como carregar o shapefile no QGIS, aplicar estilos,
         calcular a soma da coluna "HECTARES", criar um novo campo 'IDHA' com auto-incremento (se ainda não existir), duplicar o layer e adicionar ambos os layers ao projeto do QGIS. 
         Durante a execução, a função imprime mensagens informativas no console para indicar o progresso e resultados das operações.
         '''
            # Nome do arquivo a ser filtrado
            nome_arquivo = name

            # Caminho completo do shapefile
            shapefile_path = shapefile_dir + '/' + nome_arquivo + '.shp'

            # Carregar o shapefile no QGIS
            layer = QgsVectorLayer(shapefile_path, nome_arquivo, 'ogr')

            # Verificar se o shapefile foi carregado com sucesso
            if not layer.isValid():
                print('Falha ao carregar o shapefile.')

            # carregando estilo
            layer.loadNamedStyle('C:/geoprocessamento/estilos/' + estilo)
            layer.triggerRepaint()

            # Obter a soma da coluna "HECTARES" e arredondar
            hectares_sum = layer.aggregate(QgsAggregateCalculator.Sum, "HECTARES")[0]
            hectares_sum = round(float(hectares_sum), 1)

            # Atualizar o nome do layer com a informação correta
            layer.setName(f"Field Boundary - {hectares_sum} ha")

            # Criar um novo campo 'IDHA' com auto-incremento (se ainda não existir)
            id_field_name = 'IDHA'
            idx = layer.fields().indexFromName(id_field_name)
            if idx == -1:
                new_field = QgsField(id_field_name, QVariant.Int)
                layer.dataProvider().addAttributes([new_field])
                layer.updateFields()

                # Calcula o auto-incremento para o novo campo 'IDHA'
                expression = QgsExpression('$id')
                context = QgsExpressionContext()
                with edit(layer):
                    for feature in layer.getFeatures():
                        context.setFeature(feature)
                        feature[id_field_name] = expression.evaluate(context)
                        layer.updateFeature(feature)

                print(f"Auto-incrementing field '{id_field_name}' added and calculated successfully.")
            else:
                print(f"Field '{id_field_name}' already exists. Skipping creation.")

            # Adicionar o layer ao projeto do QGIS
            QgsProject.instance().addMapLayer(layer)
            # Duplicate the layer
            duplicated_layer = layer.clone()
            
            # Load the 'hectares.qml' style for the duplicated layer
            duplicated_layer.loadNamedStyle('C:/geoprocessamento/estilos/' + 'hectares.qml')
            duplicated_layer.triggerRepaint()

          

            # Add the duplicated layer to the project
            QgsProject.instance().addMapLayer(duplicated_layer)

        ChamarLayerLayout(shapefile_dir, name = 'Field_1', estilo = 'talhao.qml')

        def CriarLayout():
         '''
         A função CriarLayout é responsável por criar um layout de impressão no QGIS, adicionando um mapa e uma legenda a esse layout.
         '''
            ##CRIANDO LAYOUT DE IMPRESSAO
            project = QgsProject.instance()
            manager = project.layoutManager()
            layout = QgsPrintLayout(project)
            layoutName = 'FERTILIDADE'
            layout.initializeDefaults()
            layout.setName(layoutName)
            manager.addLayout(layout)
           

            ##ADICIONANDO MAPA
            map = QgsLayoutItemMap(layout)
            map.setBackgroundColor(QColor(0,0,0,0))
            map.setRect(20,20,20,20)
            canvas = iface.mapCanvas()
            map.setExtent(canvas.extent())
            layout.addLayoutItem(map)
            map.attemptResize(QgsLayoutSize(225.87, 199.75, QgsUnitTypes.LayoutMillimeters))
            map.attemptMove(QgsLayoutPoint(44.96, 5.10, QgsUnitTypes.LayoutMillimeters))

            ##LEGENDA

            legend = QgsLayoutItemLegend(layout)
            layout.addLayoutItem(legend)
            newFont = QFont("ARIAL", 15)
            legend.setStyleFont(QgsLegendStyle.Title,newFont)
            legend.setStyleFont(QgsLegendStyle.Subgroup, newFont)
            legend.setStyleFont(QgsLegendStyle.SymbolLabel, newFont)
            #legend.setLinkedMap(map) # pass a QgsLayoutItemMap object
            legend.setLegendFilterByMapEnabled(True)
            legend.refresh()
            legend.setBackgroundColor(QColor(0,0,0,0))
            legend.attemptMove(QgsLayoutPoint(0.370,5.10, QgsUnitTypes.LayoutMillimeters))

        CriarLayout()

        def save_qgis_project(project_path):
         '''
         A Função Salva o projeto atual como LAYOUT
         '''
            # Get the current QGIS project instance
            qgis_project = QgsProject.instance()

            # Set the project file path
            qgis_project.setFileName(project_path)

            # Save the project
            qgis_project.write()

        save_qgis_project(self.pasta+'/'+'LAYOUT.qgz')
        
        
        
    def SalvarProjetos(self):
     '''
     Retorna: executar função de descompactação de DTU, Função implementada para o botão pushButtonProjeto
     '''
        from qgis.core import QgsField, QgsVectorLayer, QgsFeature, QgsExpression, QgsExpressionContext, QgsAggregateCalculator, QgsExpression,QgsExpressionContext, edit
        #from qgis.gui import QgsRendererRangeLabelFormat
        from qgis.core import QgsVectorLayer, QgsProject, QgsLayoutSize, QgsUnitTypes, QgsLayoutPoint, QgsLayoutItemLegend, QgsLegendStyle, QgsLayoutItemMap, QgsPrintLayout, QgsAggregateCalculator
        from PyQt5.QtGui import QColor, QFont
        from qgis.utils import iface
        from qgis.core import QgsField, QgsVectorLayer, QgsFeature, QgsExpression, QgsExpressionContext
        from PyQt5.QtCore import QVariant
        #from qgis.gui import QgsCategoryLabeling, QgsCategoryRenderer
        import time
        import qgis.core
        import qgis.gui
        import qgis.utils
        import PyQt5.QtCore
        from qgis.core import QgsRendererRangeLabelFormat
        self.pasta = self.dockwidget.mQgsFileWidgetDtu.filePath()
        shapefile_dir = self.pasta

        

        ##CONFIGURAÇÃO LABEL SIMBOLOGIA
         
        format = QgsRendererRangeLabelFormat()
        format.setFormat("%1 - %2")
        format.setPrecision(2)
        format.setTrimTrailingZeroes(True)


        def move_layer_to_top(parte_da_string):
         '''
         A função move_layer_to_top(parte_da_string) tem a finalidade de mover uma camada específica para o topo da hierarquia de camadas no projeto do QGIS
         '''
            # Procurar pela camada que contém a parte específica da string no nome
            alayer = None
            map_layers = QgsProject.instance().mapLayers().values()
            for layer in map_layers:
                if parte_da_string in layer.name():
                    alayer = layer
                    break

            # Verificar se a camada foi encontrada e, em seguida, mover para o topo
            if alayer is not None:
                root = QgsProject.instance().layerTreeRoot()
                myalayer = root.findLayer(alayer.id())
                myClone = myalayer.clone()
                parent = myalayer.parent()
                parent.insertChildNode(0, myClone)
                parent.removeChildNode(myalayer)
            else:
                print("Camada não encontrada.")
                
        def ChamarAtributos(shapefile_dir, name=str, new_name=str):
         '''
         A função ChamarAtributos(shapefile_dir, name=str, new_name=str) tem como objetivo carregar um arquivo shapefile no QGIS, verificar se o carregamento foi bem-sucedido,
         adicionar o layer resultante ao projeto do QGIS e renomear o layer.
         Parâmetros: shapefile_dir, O diretório onde o arquivo shapefile está localizado; name, O nome do arquivo shapefile (sem a extensão ".shp") que você deseja carregar; new_name;  O novo nome que você deseja atribuir ao layer.
         '''
            # Nome do arquivo a ser filtrado
            nome_arquivo = name

            # Caminho completo do shapefile
            shapefile_path = shapefile_dir + '/' + nome_arquivo + '.shp'

            # Carregar o shapefile no QGIS
            layer = QgsVectorLayer(shapefile_path, nome_arquivo, 'ogr')

            # Verificar se o shapefile foi carregado com sucesso
            if not layer.isValid():
                raise Exception('Falha ao carregar o shapefile.')

            # Adicionar o layer ao projeto do QGIS
            QgsProject.instance().addMapLayer(layer)

            # Tentar renomear o layer caso exista
            try:
                old_layer = QgsProject.instance().mapLayersByName(name)[0]
                old_layer.setName(new_name)
            except IndexError:
                raise Exception('Nenhum layer encontrado com o nome especificado.')



        def OcultarLegendaLayout():
         '''
         A função OcultarLegendaLayout é usada para ocultar uma parte específica da legenda em um layout de impressão no QGIS
         '''
            layout = QgsProject.instance().layoutManager().layoutByName("FERTILIDADE")

            if layout is not None:
                legend = None

                for item in layout.items():
                    if isinstance(item, QgsLayoutItemLegend):
                        legend = item
                        break

                if legend is not None:
                    legend.setAutoUpdateModel(False)

                    string_to_find = "Field Boundary"  # Parte do nome do layer a ser encontrada

                    legend_group = legend.model().rootGroup()
                    for child in legend_group.children():
                        if string_to_find in child.name():
                            legend_group.removeChildNode(child)

                    legend.refresh()
                else:
                    print("Nenhuma legenda encontrada no layout.")
            else:
                print("Layout não encontrado.")

        def HabilitarLegendaLayout():
         '''
         A função HabilitarLegendaLayout é usada para Habilitar uma parte específica da legenda em um layout de impressão no QGIS
         '''
            layout = QgsProject.instance().layoutManager().layoutByName("FERTILIDADE")

            if layout is not None:
                legend = None

                for item in layout.items():
                    if isinstance(item, QgsLayoutItemLegend):
                        legend = item
                        break

                if legend is not None:
                    legend.setAutoUpdateModel(False)

                    string_to_find = "Field Boundary"  # Parte do nome do layer a ser encontrada

                    legend_group = legend.model().rootGroup()
                    for child in legend_group.children():
                        if string_to_find in child.name():
                            legend_group.removeChildNode(child)

                    legend.setAutoUpdateModel(True)
                    legend.refresh()
                else:
                    print("Nenhuma legenda encontrada no layout.")
            else:
                print("Layout não encontrado.")
                
        def LegendasAtributos(atributo = str, style = str):
         '''
          função que lida com a estilização e ocultação da legenda de um layer específico em um projeto QGIS.
          Parâmetros: atributo, : O nome do layer que você deseja estilizar e ocultar na legenda. O layer é obtido usando QgsProject().instance().mapLayersByName(atributo)[0]; style,  O nome do arquivo de estilo que será aplicado ao layer. O estilo deve estar localizado no diretório "C:/geoprocessamento/estilos/". O estilo é carregado usando layer.loadNamedStyle();
         '''
            layer = QgsProject().instance().mapLayersByName(atributo)[0]
            layer.loadNamedStyle('C:/geoprocessamento/estilos/'+ style)
            layer.triggerRepaint()
            OcultarLegendaLayout()
            

        DictLegends = {
            "Mo1 0-20 cm": "mo1",
            "Mo2 0-10 cm": "mo2",
            "Mo3 10-20 cm": "mo3",
            "Mo4 20-40 cm": "mo4",
            "pH1 0-20 cm": "ph1",
            "pH2 0-10 cm": "ph2",
            "pH3 10-20 cm": "ph3",
            "pH4 20-40 cm": "ph4",
            "V1 0-20 cm": "v1",
            "V2 0-10 cm": "v2",
            "V3 10-20 cm": "v3",
            "V4 20-40 cm": "v4",
            "V4 20-40(1) cm": "v4",
            "Ca1 0-20 cm": "ca1",
            "Ca2 0-10 cm": "ca2",
            "Ca3 10-20 cm": "ca3",
            "Ca4 20-40 cm": "ca4",
            "Ca4 20-40(1) cm": "ca4",
            "Sat_Ca1 0-20 cm": "sat_ca1",
            "Sat_Ca2 0-10 cm": "sat_ca2",
            "Sat_Ca3 10-20 cm": "sat_ca3",
            "Sat_Ca4 20-40 cm": "sat_ca4",
            "Mg1 0-20 cm": "mg1",
            "Mg2 0-10 cm": "mg2",
            "Mg3 10-20 cm": "mg3",
            "Mg4 20-40 cm": "mg4",
            "Sat_Mg1 0-20 cm": "sat_mg1",
            "Sat_Mg2 0-10 cm": "sat_mg2",
            "Sat_Mg3 10-20 cm": "sat_mg3",
            "Sat_Mg4 20-40 cm": "sat_mg4",
            "Rel_Ca_Mg1 0-20 cm": "rel_ca_mg1",
            "Rel_Ca_Mg2 0-10 cm": "rel_ca_mg2",
            "Rel_Ca_Mg3 10-20 cm": "rel_ca_mg3",
            "Rel_Ca_Mg4 20-40 cm": "rel_ca_mg4",
            "K1 0-20 cm": "k1",
            "K2 0-10 cm": "k2",
            "K3 10-20 cm": "k3",
            "K4 20-40 cm": "k4",
            "Sat_K1 0-20 cm": "sat_k1",
            "Sat_K2 0-10 cm": "sat_k2",
            "Sat_K3 10-20 cm": "sat_k3",
            "Sat_K4 20-40 cm": "sat_k4",
            "P_res1 0-20 cm": "p_res1",
            "P_res2 0-10 cm": "p_res2",
            "P_res3 10-20 cm": "p_res3",
            "P_res4 20-40 cm": "p_res4",
            "Al1 0-20 cm": "al1",
            "Al2 0-10 cm": "al2",
            "Al3 10-20 cm": "al3",
            "Al4 20-40 cm": "al4",
            "Al4 20-40(1) cm": "al4",
            "Sat_Al1 0-20 cm": "sat_al1",
            "Sat_Al2 0-10 cm": "sat_al2",
            "Sat_Al3 10-20 cm": "sat_al3",
            "Sat_Al4 20-40 cm": "sat_al4",
            "S1 0-20 cm": "s1",
            "S2 0-10 cm": "s2",
            "S3 10-20 cm": "s3",
            "S4 20-40 cm": "s4",
            "S4 20-40(1) cm": "s4",
            "B1 0-20 cm": "b1",
            "B2 0-10 cm": "b2",
            "B3 10-20 cm": "b3",
            "B4 20-40 cm": "b4",
            "Cu1 0-20 cm": "cu1",
            "Cu2 0-10 cm": "cu2",
            "Cu3 10-20 cm": "cu3",
            "Cu4 20-40 cm": "cu4",
            "Fe1 0-20 cm": "fe1",
            "Fe2 0-10 cm": "fe2",
            "Fe3 10-20 cm": "fe3",
            "Fe4 20-40 cm": "fe4",
            "Mn1 0-20 cm": "mn1",
            "Mn2 0-10 cm": "mn2",
            "Mn3 10-20 cm": "mn3",
            "Mn4 20-40 cm": "mn4",
            "Zn1 0-20 cm": "zn1",
            "Zn2 0-10 cm": "zn2",
            "Zn3 10-20 cm": "zn3",
            "Zn4 20-40 cm": "zn4"
        }

        ReplaceName2 = {
            "Mo1_0_20": "Mo1 0-20 cm",
            "Mo2_0_10": "Mo2 0-10 cm",
            "Mo3_10_20": "Mo3 10-20 cm",
            "Mo4_20_40": "Mo4 20-40 cm",
            "Ph1_0_20": "pH1 0-20 cm",
            "Ph2_0_10": "pH2 0-10 cm",
            "Ph3_10_20": "pH3 10-20 cm",
            "Ph4_20_40": "pH4 20-40 cm",
            "V1_0_20": "V1 0-20 cm",
            "V2_0_10": "V2 0-10 cm",
            "V3_10_20": "V3 10-20 cm",
            "V4_20_40": "V4 20-40 cm",
            "V4_20_40(1)": "V4 20-40 cm",
            "Ca1_0_20": "Ca1 0-20 cm",
            "Ca2_0_10": "Ca2 0-10 cm",
            "Ca3_10_20": "Ca3 10-20 cm",
            "Ca4_20_40": "Ca4 20-40 cm",
            "Ca4_20_40(1)": "Ca4 20-40 cm",
            "Sat_ca1_0_20": "Sat_Ca1 0-20 cm",
            "Sat_ca2_0_10": "Sat_Ca2 0-10 cm",
            "Sat_ca3_10_20": "Sat_Ca3 10-20 cm",
            "Sat_ca4_20_40": "Sat_Ca2 20-40 cm",
            "Mg1_0_20": "Mg1 0-20 cm",
            "Mg2_0_10": "Mg2 0-10 cm",
            "Mg3_10_20": "Mg3 10-20 cm",
            "Mg4_0_10": "Mg4 20-40 cm",
            "Sat_mg1_0_20": "Sat_Mg1 0-20 cm",
            "Sat_mg2_0_10": "Sat_Mg2 0-10 cm",
            "Sat_mg3_10_20": "Sat_Mg3 10-20 cm",
            "Sat_mg4_0_10": "Sat_Mg4 20-40 cm",
            "Rel_ca_mg1_0_20": "Rel_Ca_Mg1 0-20 cm",
            "Rel_ca_mg2_0_10": "Rel_Ca_Mg2 0-10 cm",
            "Rel_ca_mg3_10_20": "Rel_Ca_Mg3 10-20 cm",
            "Rel_ca_mg4_20_40": "Rel_Ca_Mg4 20-40 cm",
            "K1_0_20": "K1 0-20 cm",
            "K2_0_10": "K2 0-10 cm",
            "K3_10_20": "K3 10-20 cm",
            "K4_20_40": "K4 20-40 cm",
            "Sat_k1_0_20": "Sat_K1 0-20 cm",
            "Sat_k2_0_10": "Sat_K2 0-10 cm",
            "Sat_k3_10_20": "Sat_K3 10-20 cm",
            "Sat_k4_0_10": "Sat_K4 20-40 cm",
            "P_res1_0_20": "P_res1 0-20 cm",
            "P_res2_0_10": "P_res2 0-10 cm",
            "P_res3_10_20": "P_res3 10-20 cm",
            "P_res4_20_40": "P_res4 20-40 cm",
            "Al1_0_20": "Al1 0-20 cm",
            "Al2_0_10": "Al2 0-10 cm",
            "Al3_10_20": "Al3 10-20 cm",
            "Al4_20_40": "Al4 20-40 cm",
            "Al4_20_40(1)": "Al4 20-40 cm",
            "Sat_al1_0_20": "Sat_Al1 0-20 cm",
            "Sat_al2_0_10": "Sat_Al2 0-10 cm",
            "Sat_al3_10_20": "Sat_Al3 10-20 cm",
            "Sat_al4_0_10": "Sat_Al4 20-40 cm",
            "S1_0_20": "S1 0-20 cm",
            "S2_0_10": "S2 0-10 cm",
            "S3_10_20": "S3 10-20 cm",
            "S4_20_40": "S4 20-40 cm",
            "S4_20_40(1)": "S4 20-40 cm",
            "B1_0_20": "B1 0-20 cm",
            "B2_0_10": "B2 0-10 cm",
            "B3_10_20": "B3 10-20 cm",
            "B4_20_40": "B4 20-40 cm",
            "Cu1_0_20": "Cu1 0-20 cm",
            "Cu2_0_10": "Cu2 0-10 cm",
            "Cu3_10_20": "Cu3 10-20 cm",
            "Cu4_20_40": "Cu4 20-40 cm",
            "Fe1_0_20": "Fe1 0-20 cm",
            "Fe2_0_10": "Fe2 0-10 cm",
            "Fe3_10_20": "Fe3 10-20 cm",
            "Fe4_20_40": "Fe4 20-40 cm",
            "Mn1_0_20": "Mn1 0-20 cm",
            "Mn2_0_10": "Mn2 0-10 cm",
            "Mn3_10_20": "Mn3 10-20 cm",
            "Mn4_20_40": "Mn4 20-40 cm",
            "Zn1_0_20": "Zn1 0-20 cm",
            "Zn2_0_10": "Zn2 0-10 cm",
            "Zn3_10_20": "Zn3 10-20 cm",
            "Zn4_20_40": "Zn4 20-40 cm"
        }

       
        for atributo, new_name in ReplaceName2.items():
            try:
                # Call the ChamarAtributos function with the given attributes and new names
                ChamarAtributos(shapefile_dir, name=atributo, new_name=new_name)
                HabilitarLegendaLayout()
                # Check if there's a corresponding style in DictLegends
                if new_name in DictLegends:
                    style = DictLegends[new_name] + '.qml'
                else:
                    style = 'default.qml'  # Use the default style if no corresponding style
                
                # Call the LegendasAtributos function with the new attribute name and style
                LegendasAtributos(atributo=new_name, style=style)
                
                # Move the 'Field Boundary' layer to the top
                move_layer_to_top('Field Boundary')
               
                # Save the project with the new attribute
                QgsProject.instance().write(shapefile_dir + "/" + new_name + ".qgz")

                project = QgsProject.instance()

                # Remove the newly added attribute layer
                to_be_deleted = project.mapLayersByName(new_name)[0]
                project.removeMapLayer(to_be_deleted.id())

                # Enable legend in the layout
                HabilitarLegendaLayout()

                # Find and remove legend items containing 'Field Boundary'
                legend = QgsProject.instance().layoutManager().layoutByName('Your_Layout_Name').itemById('Legend_Item_ID')
                if legend:
                    legend_items = legend.legendItems()
                    for legend_item in legend_items:
                        if 'Field Boundary' in legend_item.text():  # Check if 'Field Boundary' is in the legend item's text
                            legend.removeItem(legend_item)

                # Add a delay of 1 second
                #time.sleep(1.0)
            except:
                # If an error occurs, ignore it and wait for 1 second
                pass
                #time.sleep(1.0)

  
        def CtcArgila(layer = str, estilo = str):
         '''
         A função CtcArgila estar relacionada à estilização e configuração de um layer no QGIS.
         Parâmetros: layer, O nome do layer que será estilizado e configurado;estilo, O nome do arquivo de estilo (QML) que será aplicado ao layer. 
         '''
            layer = QgsProject.instance().mapLayersByName(layer)[0]
            
            # Load the style from the QML file
            style_path = "C:/geoprocessamento/estilos/" + estilo + ".qml"
            layer.loadNamedStyle(style_path)
            renderer = layer.renderer()

            renderer.updateClasses(layer,2,5) # Update the QgsGraduatedSymbologyRenderer.mode and set the classes up to 5
            renderer.updateRangeLabels() # Update label range
            renderer.updateColorRamp() # Update the color ramp
            iface.layerTreeView().refreshLayerSymbology(layer.id()) # Refresh legend on the interface
            layer.reload()
            move_layer_to_top('Field Boundary')
            OcultarLegendaLayout()
        
        ## CTC2
        try:
            ChamarAtributos(shapefile_dir, name = 'Ctc2_0_10', new_name = 'CTC2 0-10 cm' )
            CtcArgila(layer = 'CTC2 0-10 cm', estilo = 'CTC2')
            move_layer_to_top('Field Boundary')
            
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "CTC2 0-10 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            to_be_deleted = project.mapLayersByName('CTC2 0-10 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
           
            HabilitarLegendaLayout()
        except:
            pass
            #time.sleep(1.0)
            
        ## CTC3
        try:
            ChamarAtributos(shapefile_dir, name = 'Ctc3_10_20', new_name = 'CTC3 10-20 cm' )
            CtcArgila(layer = 'CTC3 10-20 cm', estilo = 'CTC3')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "CTC3 10-20 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('CTC3 10-20 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
            HabilitarLegendaLayout()
        except:
            pass
            #time.sleep(1.0)
            
        ## CTC4
        try:
            ChamarAtributos(shapefile_dir, name = 'Ctc4_20_40', new_name = 'CTC4 20-40 cm' )
            CtcArgila(layer = 'CTC4 20-40 cm', estilo = 'CTC4')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "CTC4 20-40 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('CTC4 20-40 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
            HabilitarLegendaLayout()
        except:
            pass
            #time.sleep(1.0)
          
        ## CTC4(1)
        try:
            ChamarAtributos(shapefile_dir, name = 'Ctc4_20_40(1)', new_name = 'CTC4 20-40 cm' )
            CtcArgila(layer = 'CTC4 20-40 cm', estilo = 'CTC4')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "CTC4(1) 20-40 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('CTC4 20-40 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
            HabilitarLegendaLayout()
        except:
            pass 
            #time.sleep(1.0)
        ## CTC1
        try:
            ChamarAtributos(shapefile_dir, name = 'Ctc1_0_20', new_name = 'CTC1 0-20 cm' )
            CtcArgila(layer = 'CTC1 0-20 cm', estilo = 'CTC1')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "CTC1 0-20 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('CTC1 0-20 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
            HabilitarLegendaLayout()
        except:
            pass
            #time.sleep(1.0)

        ## Argila2
        try:
            ChamarAtributos(shapefile_dir, name = 'Argila2_0_10', new_name = 'Argila2 0-10 cm' )
            CtcArgila(layer = 'Argila2 0-10 cm', estilo = 'argila2')
            move_layer_to_top('Field Boundary')
            
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "Argila2 0-10 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            to_be_deleted = project.mapLayersByName('Argila2 0-10 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
           
            HabilitarLegendaLayout()
        except:
            pass
            #time.sleep(1.0)
        ## ARGILA3
        try:
            ChamarAtributos(shapefile_dir, name = 'Argila3_10_20', new_name = 'Argila3 10-20 cm' )
            CtcArgila(layer = 'Argila3 10-20 cm', estilo = 'argila3')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "Argila3 10-20 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('Argila3 10-20 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
        except:
            pass
            #time.sleep(1.0)
    

        ## Argila1
        try:
            ChamarAtributos(shapefile_dir, name = 'Argila1_0_20', new_name = 'Argila1 0-20 cm' )
            CtcArgila(layer = 'Argila1 0-20 cm', estilo = 'argila1')
            move_layer_to_top('Field Boundary')
            #Salvando Atributo
            
            QgsProject.instance().write(shapefile_dir +"/"+ "Argila1 0-20 cm" + ".qgz")
            project=QgsProject.instance()
            
            #Removendo Atributo
            project=QgsProject.instance()
            
            to_be_deleted = project.mapLayersByName('Argila1 0-20 cm')[0]
            project.removeMapLayer(to_be_deleted.id())
            HabilitarLegendaLayout()
        except:
            pass
            
        #time.sleep(3.0) 
        from PyQt5.QtWidgets import QMessageBox
        # Exibindo a caixa de diálogo após a conclusão da função
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Processo Concluído")
        msg_box.setText("O processo de Salvar os Projetos finalizado com sucesso!")
        msg_box.setIcon(QMessageBox.Information)
        msg_box.exec_()
    def  ExportarImagem(self):
        from PyQt5.QtWidgets import QFileDialog
        import os
        import processing
        import time
        from qgis.core import QgsVectorLayer, QgsProject, QgsLayoutSize, QgsUnitTypes, QgsLayoutPoint, QgsLayoutItemLegend, QgsLegendStyle, QgsLayoutItemMap, QgsPrintLayout, QgsAggregateCalculator, QgsLayoutExporter
        self.pasta = self.dockwidget.mQgsFileWidgetDtu.filePath()
        folderpath  = self.pasta  
        outputpath = self.pasta  
        def ExportarMapas():
            for root, dirs, files in os.walk (folderpath):
                for file in files:
                    if file.endswith ('.qgz') or file.endswith ('.qgs'):
                        arq = os.path.join (root, file)
                        #print (arq)
                        
                        try:
                            file_pdf = str (file).replace ('qgz', 'pdf')
                        except:
                            file_pdf = str (file).replace ('qgs', 'pdf')

                        
                        try:
                            file_img = str (file).replace ('qgz', 'png')
                        except:
                            file_img = str (file).replace ('qgs', 'png')
                        
                        try:
                            file_name = str (file).replace ('qgz', '')
                        except:
                            file_name = str (file).replace ('qgs', '')


                        project = QgsProject.instance()
                        project.read(arq)
                        manager = project.layoutManager()
                        layouts_list = manager.printLayouts()
                        for layout in layouts_list:
                            name_layout = layout.name()
                            print (layout.name())
                            file_img = file_name + '_' + name_layout + '_' + file_img
                            file_img = os.path.join (root, file_img)
                            #print (file_img)
                            file_pdf = file_name + '_' +  name_layout + '_' +  file_pdf
                            file_pdf = os.path.join (root,  file_pdf)
                            #print (file_pdf)
                            exporter = QgsLayoutExporter(layout)
                            #fn = 'D://_teste_export_maps//_teste.pdf'
                            camada_atlas = (layout.atlas().coverageLayer ())
                            #exporter.exportToImage(file_img, QgsLayoutExporter.ImageExportSettings())
                            #exporter.exportToPdf(file_pdf, QgsLayoutExporter.PdfExportSettings())

                            if camada_atlas == None:
                                print ('Fluxo mapa unico')
                                exporter.exportToImage(file_img, QgsLayoutExporter.ImageExportSettings())
                                #exporter.exportToPdf(file_pdf, QgsLayoutExporter.PdfExportSettings())
                            else:
                                print ('Fluxo mapa atlas')
                                processing.run("native:atlaslayouttoimage", {'LAYOUT':name_layout,'COVERAGE_LAYER':None,'FILTER_EXPRESSION':'','SORTBY_EXPRESSION':'','SORTBY_REVERSE':False,'FILENAME_EXPRESSION':'\'{0}_\'||@atlas_pagename'.format (file_name + '_' + name_layout ),'FOLDER':outputpath,'LAYERS':None,'EXTENSION':8,'DPI':None,'GEOREFERENCE':True,'INCLUDE_METADATA':True,'ANTIALIAS':True})
                                #file_pdf = root+ '/' + name_layout + '_' +  file_pdf

                                #processing.run("native:atlaslayouttopdf", {'LAYOUT':name_layout,'COVERAGE_LAYER':None,'FILTER_EXPRESSION':'','SORTBY_EXPRESSION':'','SORTBY_REVERSE':False,'OUTPUT': '{0}'.format (file_pdf) ,'LAYERS':None,'DPI':None,'FORCE_VECTOR':False,'GEOREFERENCE':True,'INCLUDE_METADATA':True,'DISABLE_TILED':False,'SIMPLIFY':True,'TEXT_FORMAT':0})
                            #time.sleep(1.0)
        ExportarMapas()
        from PyQt5.QtWidgets import QMessageBox
        # Exibindo a caixa de diálogo após a conclusão da função
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Processo Concluído")
        msg_box.setText("O processo de Exportação dos Mapas finalizado com sucesso!")
        msg_box.setIcon(QMessageBox.Information)
        msg_box.exec_()
    
    
   
    
    
    def GerarApresentacao(self):
    
        from PyQt5.QtWidgets import QFileDialog
        import os
        import processing
        import time
        from qgis.core import QgsVectorLayer, QgsProject, QgsLayoutSize, QgsUnitTypes, QgsLayoutPoint, QgsLayoutItemLegend, QgsLegendStyle, QgsLayoutItemMap, QgsPrintLayout, QgsAggregateCalculator, QgsLayoutExporter
        
        self.pasta = self.dockwidget.mQgsFileWidgetDtu.filePath()
        #self.imagem = self.dockwidget.mQgsFileWidgetImagem.filePath()
        
        # PADRAO
        if self.dockwidget.checkBoxLavoura.isChecked() == True:
            self.padrao = 'LAVOURA'
        
        if self.dockwidget.checkBoxAbertura.isChecked() == True: 
            self.padrao = 'ABERTURA'
            
        #MODELO
        if self.dockwidget.checkBoxTerram.isChecked() == True:
            self.empresa = 'TERRAM'
        
        if self.dockwidget.checkBoxJp.isChecked() == True: 
            self.empresa = 'JP'
            
        if self.dockwidget.checkBoxElo.isChecked() == True: 
            self.empresa = 'ELO'    


        #MODELO
        if self.dockwidget.checkBoxPadrao.isChecked() == True:
            self.atributo = 'PADRAO'
        
        if self.dockwidget.checkBoxCompleto.isChecked() == True: 
            self.atributo = 'COMPLETO'
            
        folderpath  = self.pasta  
        outputpath = self.pasta  
        
        
        
        def Apresentacao():
            from pptx import Presentation
            import os
            import csv
            from pptx import Presentation
            from pptx.util import Cm, Pt
            from PIL import Image
            from dbfread import DBF

            # Load the existing PowerPoint presentation

            imgPPTLavouraPadrao = {
                'LAYOUT._FERTILIDADE_LAYOUT': 1,
                'Argila2 0-10 cm._FERTILIDADE_Argila2 0-10 cm': 2,
                'Mo2 0-10 cm._FERTILIDADE_Mo2 0-10 cm': 3,
                'Mo3 10-20 cm._FERTILIDADE_Mo3 10-20 cm': 4,
                'CTC2 0-10 cm._FERTILIDADE_CTC2 0-10 cm': 5,
                'CTC3 10-20 cm._FERTILIDADE_CTC3 10-20 cm': 6,
                'CTC4 20-40 cm._FERTILIDADE_CTC4 20-40 cm': 7,
                'CTC4 20-40(1) cm._FERTILIDADE_CTC4 20-40(1) cm': 7,
                'pH2 0-10 cm._FERTILIDADE_pH2 0-10 cm': 8,
                'pH3 10-20 cm._FERTILIDADE_pH3 10-20 cm': 9,
                'V2 0-10 cm._FERTILIDADE_V2 0-10 cm': 10,
                'V3 10-20 cm._FERTILIDADE_V3 10-20 cm': 11,
                'V4 20-40 cm._FERTILIDADE_V4 20-40 cm': 12,
                'V4 20-40(1) cm._FERTILIDADE_V4 20-40(1) cm': 12,
                'Ca2 0-10 cm._FERTILIDADE_Ca2 0-10 cm': 13,
                'Ca3 10-20 cm._FERTILIDADE_Ca3 10-20 cm': 14,
                'Ca4 20-40 cm._FERTILIDADE_Ca4 20-40 cm': 15,
                'Ca4 20-40(1) cm._FERTILIDADE_Ca4 20-40(1) cm': 15,
                'Mg2 0-10 cm._FERTILIDADE_Mg2 0-10 cm': 16,
                'Mg3 10-20 cm._FERTILIDADE_Mg3 10-20 cm': 17,
                'K2 0-10 cm._FERTILIDADE_K2 0-10 cm': 18,
                'K3 10-20 cm._FERTILIDADE_K3 10-20 cm': 19,
                'P_res2 0-10 cm._FERTILIDADE_P_res2 0-10 cm': 20,
                'P_res3 10-20 cm._FERTILIDADE_P_res3 10-20 cm': 21,
                'Al2 0-10 cm._FERTILIDADE_Al2 0-10 cm': 22,
                'Al3 10-20 cm._FERTILIDADE_Al3 10-20 cm': 23,
                'Al4 20-40 cm._FERTILIDADE_Al4 20-40 cm': 24,
                'Al4 20-40(1) cm._FERTILIDADE_Al4 20-40(1) cm': 24,
                'S2 0-10 cm._FERTILIDADE_S2 0-10 cm': 25,
                'S4 20-40 cm._FERTILIDADE_S4 20-40 cm': 26,
                'S4 20-40(1) cm._FERTILIDADE_S4 20-40(1) cm': 26,
                'B2 0-10 cm._FERTILIDADE_B2 0-10 cm': 27,
                'Cu2 0-10 cm._FERTILIDADE_Cu2 0-10 cm': 28,
                'Mn2 0-10 cm._FERTILIDADE_Mn2 0-10 cm': 29,
                'Zn2 0-10 cm._FERTILIDADE_Zn2 0-10 cm': 30}
                
            MediaPPTLavouraPadrao = {
                'Argila2_0_10': 2,
                'Mo2_0_10': 3,
                'Mo3_10_20': 4,
                'CTC2_0_10': 5,
                'CTC3_10_20': 6,
                'CTC4_20_40': 7,
                'CTC4_20_40(1)': 7,
                'pH2_0_10': 8,
                'pH3_10_20': 9,
                'V2_0_10': 10,
                'V3_10_20': 11,
                'V4_20_40': 12,
                'V4_20_40(1)': 12,
                'Ca2_0_10': 13,
                'Ca3_10_20': 14,
                'Ca4_20_40': 15,
                'Ca4_20_40(1)': 15,
                'Mg2_0_10': 16,
                'Mg3_10_20': 17,
                'K2_0_10': 18,
                'K3_10_20': 19,
                'P_res2_0_10': 20,
                'P_res3_10_20': 21,
                'Al2_0_10': 22,
                'Al3_10_20': 23,
                'Al4_20_40': 24,
                'Al4_20_40(1)': 24,
                'S2_0_10': 25,
                'S4_20_40': 26,
                'S4_20_40(1)': 26,
                'B2_0_10': 27,
                'Cu2_0_10': 28,
                'Mn2_0_10': 29,
                'Zn2_0_10': 30
            }

            imgPPTLavouraCompleto = {
                'LAYOUT._FERTILIDADE_LAYOUT': 1,
                'Argila2 0-10 cm._FERTILIDADE_Argila2 0-10 cm': 2,
                'Argila3 10-20 cm._FERTILIDADE_Argila3 10-20 cm': 3,
                'Mo2 0-10 cm._FERTILIDADE_Mo2 0-10 cm': 4,
                'Mo3 10-20 cm._FERTILIDADE_Mo3 10-20 cm': 5,
                'CTC2 0-10 cm._FERTILIDADE_CTC2 0-10 cm': 6,
                'CTC3 10-20 cm._FERTILIDADE_CTC3 10-20 cm': 7,
                'CTC4 20-40 cm._FERTILIDADE_CTC4 20-40 cm': 8,
                'CTC4 20-40(1) cm._FERTILIDADE_CTC4 20-40(1) cm': 8,
                'pH2 0-10 cm._FERTILIDADE_pH2 0-10 cm': 9,
                'pH3 10-20 cm._FERTILIDADE_pH3 10-20 cm': 10,
                'V2 0-10 cm._FERTILIDADE_V2 0-10 cm': 11,
                'V3 10-20 cm._FERTILIDADE_V3 10-20 cm': 12,
                'V4 20-40 cm._FERTILIDADE_V4 20-40 cm': 13,
                'V4 20-40(1) cm._FERTILIDADE_V4 20-40(1) cm': 13,
                'Ca2 0-10 cm._FERTILIDADE_Ca2 0-10 cm': 14,
                'Ca3 10-20 cm._FERTILIDADE_Ca3 10-20 cm': 15,
                'Ca4 20-40 cm._FERTILIDADE_Ca4 20-40 cm': 16,
                'Ca4 20-40(1) cm._FERTILIDADE_Ca4 20-40(1) cm': 16,
                'Sat_Ca2 0-10 cm._FERTILIDADE_Sat_Ca2 0-10 cm': 17,
                'Sat_Ca3 10-20 cm._FERTILIDADE_Sat_Ca3 10-20 cm': 18,
                'Sat_Ca4 20-40 cm._FERTILIDADE_Sat_Ca4 20-40 cm': 19,
                'Mg2 0-10 cm._FERTILIDADE_Mg2 0-10 cm': 20,
                'Mg3 10-20 cm._FERTILIDADE_Mg3 10-20 cm': 21,
                'Sat_Mg2 0-10 cm._FERTILIDADE_Sat_Mg2 0-10 cm': 22,
                'Sat_Mg3 10-20 cm._FERTILIDADE_Sat_Mg3 10-20 cm': 23,
                'Rel_Ca_Mg2 0-10 cm._FERTILIDADE_Rel_Ca_Mg2 0-10 cm': 24,
                'Rel_Ca_Mg3 10-20 cm._FERTILIDADE_Rel_Ca_Mg3 10-20 cm': 25,
                'K2 0-10 cm._FERTILIDADE_K2 0-10 cm': 26,
                'K3 10-20 cm._FERTILIDADE_K3 10-20 cm': 27,
                'Sat_K2 0-10 cm._FERTILIDADE_Sat_K2 0-10 cm': 28,
                'Sat_K3 10-20 cm._FERTILIDADE_Sat_K3 10-20 cm': 29,
                'P_res2 0-10 cm._FERTILIDADE_P_res2 0-10 cm': 30,
                'P_res3 10-20 cm._FERTILIDADE_P_res3 10-20 cm': 31,
                'Al2 0-10 cm._FERTILIDADE_Al2 0-10 cm': 32,
                'Al3 10-20 cm._FERTILIDADE_Al3 10-20 cm': 33,
                'Al4 20-40 cm._FERTILIDADE_Al4 20-40 cm': 34,
                'Al4 20-40(1) cm._FERTILIDADE_Al4 20-40(1) cm': 34,
                'Sat_Al2 0-10 cm._FERTILIDADE_Sat_Al2 0-10 cm': 35,
                'Sat_Al3 10-20 cm._FERTILIDADE_Sat_Al3 10-20 cm': 36,
                'Sat_Al4 20-40 cm._FERTILIDADE_Sat_Al4 20-40 cm': 37,
                'S2 0-10 cm._FERTILIDADE_S2 0-10 cm': 38,
                'S3 10-20 cm._FERTILIDADE_S3 10-20 cm': 39,
                'S4 20-40 cm._FERTILIDADE_S4 20-40 cm': 40,
                'S4 20-40(1) cm._FERTILIDADE_S4 20-40(1) cm': 40,
                'B2 0-10 cm._FERTILIDADE_B2 0-10 cm': 41,
                'B3 10-20 cm._FERTILIDADE_B3 10-20 cm': 42,
                'Cu2 0-10 cm._FERTILIDADE_Cu2 0-10 cm': 43,
                'Cu3 10-20 cm._FERTILIDADE_Cu3 10-20 cm': 44,
                'Fe2 0-10 cm._FERTILIDADE_Fe2 0-10 cm': 45,
                'Fe3 10-20 cm._FERTILIDADE_Fe3 10-20 cm': 46,
                'Mn2 0-10 cm._FERTILIDADE_Mn2 0-10 cm': 47,
                'Mn3 10-20 cm._FERTILIDADE_Mn3 10-20 cm': 48,
                'Zn2 0-10 cm._FERTILIDADE_Zn2 0-10 cm': 49,
                'Zn3 10-20 cm._FERTILIDADE_Zn3 10-20 cm': 50
            }

            MediaPPTLavouraCompleto = {
                'LAYOUT_FERTILIDADE_LAYOUT': 1,
                'Argila2_0_10': 2,
                'Argila3_10_20': 3,
                'Mo2_0_10': 4,
                'Mo3_10_20': 5,
                'CTC2_0_10': 6,
                'CTC3_10_20': 7,
                'CTC4_20_40': 8,
                'CTC4_20_40(1)': 8,
                'pH2_0_10': 9,
                'pH3_10_20': 10,
                'V2_0_10': 11,
                'V3_10_20': 12,
                'V4_20_40': 13,
                'V4_20_40(1)': 13,
                'Ca2_0_10': 14,
                'Ca3_10_20': 15,
                'Ca4_20_40': 16,
                'Ca4_20_40(1)': 16,
                'Sat_Ca2_0_10': 17,
                'Sat_Ca3_10_20': 18,
                'Sat_Ca4_20_40': 19,
                'Mg2_0_10': 20,
                'Mg3_10_20': 21,
                'Sat_Mg2_0_10': 22,
                'Sat_Mg3_10_20': 23,
                'Rel_ca_mg2_0_10': 24,
                'Rel_ca_mg3_10_20': 25,
                'K2_0_10': 26,
                'K3_10_20': 27,
                'Sat_K2_0_10': 28,
                'Sat_K3_10_20': 29,
                'P_res2_0_10': 30,
                'P_res3_10_20': 31,
                'Al2_0_10': 32,
                'Al3_10_20': 33,
                'Al4_20_40': 34,
                'Al4_20_40(1)': 34,
                'Sat_Al2_0_10': 35,
                'Sat_Al3_10_20': 36,
                'Sat_Al4_20_40': 37,
                'S2_0_10': 38,
                'S3_10_20': 39,
                'S4_20_40': 40,
                'S4_20_40(1)': 40,
                'B2_0_10': 41,
                'B3_10_20': 42,
                'Cu2_0_10': 43,
                'Cu3_10_20': 44,
                'Fe2_0_10': 45,
                'Fe3_10_20': 46,
                'Mn2_0_10': 47,
                'Mn3_10_20': 48,
                'Zn2_0_10': 49,
                'Zn3_10_20': 50
            }

            imgPPTAberturaCompleto = {
                'LAYOUT._FERTILIDADE_LAYOUT': 1,
                'Argila1 0-20 cm._FERTILIDADE_Argila1 0-20 cm': 2,
                'Mo1 0-20 cm._FERTILIDADE_Mo1 0-20 cm': 3,
                'CTC1 0-20 cm._FERTILIDADE_CTC1 0-20 cm': 4,
                'CTC4 20-40 cm._FERTILIDADE_CTC4 20-40 cm': 5,
                'CTC4 20-40(1) cm._FERTILIDADE_CTC4 20-40(1) cm': 5,
                'pH1 0-20 cm._FERTILIDADE_pH1 0-20 cm': 6,
                'V1 0-20 cm._FERTILIDADE_V1 0-20 cm': 7,
                'V4 20-40 cm._FERTILIDADE_V4 20-40 cm': 8,
                'V4 20-40(1) cm._FERTILIDADE_V4 20-40(1) cm': 8,
                'Ca1 0-20 cm._FERTILIDADE_Ca1 0-20 cm': 9,
                'Ca4 20-40 cm._FERTILIDADE_Ca4 20-40 cm': 10,
                'Ca4 20-40(1) cm._FERTILIDADE_Ca4 20-40(1) cm': 10,
                'Sat_Ca1 0-20 cm._FERTILIDADE_Sat_Ca1 0-20 cm': 11,
                'Sat_Ca4 20-40 cm._FERTILIDADE_Sat_Ca4 20-40 cm': 12,
                'Mg1 0-20 cm._FERTILIDADE_Mg1 0-20 cm': 13,
                'Sat_Mg1 0-20 cm._FERTILIDADE_Sat_Mg1 0-20 cm': 14,
                'Rel_Ca_Mg1 0-20 cm._FERTILIDADE_Rel_Ca_Mg1 0-20 cm': 15,
                'K1 0-20 cm._FERTILIDADE_K1 0-20 cm': 16,
                'Sat_K1 0-20 cm._FERTILIDADE_Sat_K1 0-20 cm': 17,
                'P_res1 0-20 cm._FERTILIDADE_P_res1 0-20 cm': 18,
                'Al1 0-20 cm._FERTILIDADE_Al1 0-20 cm': 19,
                'Al4 20-40 cm._FERTILIDADE_Al4 20-40 cm': 20,
                'Al4 20-40(1) cm._FERTILIDADE_Al4 20-40(1) cm': 20,
                'Sat_Al1 0-20 cm._FERTILIDADE_Sat_Al1 0-20 cm': 21,
                'Sat_Al4 20-40 cm._FERTILIDADE_Sat_Al4 20-40 cm': 22,
                'S1 0-20 cm._FERTILIDADE_S1 0-20 cm': 23,
                'S4 20-40 cm._FERTILIDADE_S4 20-40 cm': 24,
                'S4 20-40(1) cm._FERTILIDADE_S4 20-40(1) cm': 24,
                'B1 0-20 cm._FERTILIDADE_B1 0-20 cm': 25,
                'Cu1 0-20 cm._FERTILIDADE_Cu1 0-20 cm': 26,
                'Fe1 0-20 cm._FERTILIDADE_Fe1 0-20 cm': 27,
                'Mn1 0-20 cm._FERTILIDADE_Mn1 0-20 cm': 28,
                'Zn1 0-20 cm._FERTILIDADE_Zn1 0-20 cm': 29,
            }


            MediaPPTAberturaCompleto = {
                'Argila1_0_20': 2,
                'Mo1_0_20': 3,
                'Ctc1_0_20': 4,
                'Ctc4_20_40': 5,
                'Ctc4_20_40(1)': 5,
                'Ph1_0_20': 6,
                'V1_0_20': 7,
                'V4_20_40': 8,
                'V4_20_40(1)': 8,
                'Ca1_0_20': 9,
                'Ca4_20_40': 10,
                'Ca4_20_40(1)': 10,
                'Sat_Ca1_0_20': 11,
                'Sat_Ca4_20_40': 12,
                'Mg1_0_20': 13,
                'Sat_Mg1_0_20': 14,
                'Rel_Ca_Mg1_0_20': 15,
                'K1_0_20': 16,
                'Sat_K1_0_20': 17,
                'P_res1_0_20': 18,
                'Al1_0_20': 19,
                'Al4_20_40': 20,
                'Al4_20_40(1)': 20,
                'Sat_Al1_0_20': 21,
                'Sat_Al4_20_40': 22,
                'S1_0_20': 23,
                'S4_20_40': 24,
                'S4_20_40(1)': 24,
                'B1_0_20': 25,
                'Cu1_0_20': 26,
                'Fe1_0_20': 27,
                'Mn1_0_20': 28,
                'Zn1_0_20': 29,
            }



            imgPPTAberturaPadrao = {
                'LAYOUT._FERTILIDADE_LAYOUT': 1,
                'Argila1 0-20 cm._FERTILIDADE_Argila1 0-20 cm': 2,
                'Mo1 0-20 cm._FERTILIDADE_Mo1 0-20 cm': 3,
                'CTC1 0-20 cm._FERTILIDADE_CTC1 0-20 cm': 4,
                'CTC4 20-40 cm._FERTILIDADE_CTC4 20-40 cm': 5,
                'CTC4 20-40(1) cm._FERTILIDADE_CTC4 20-40 cm': 5,
                'pH1 0-20 cm._FERTILIDADE_pH1 0-20 cm': 6,
                'V1 0-20 cm._FERTILIDADE_V1 0-20 cm': 7,
                'V4 20-40 cm._FERTILIDADE_V4 20-40 cm': 8,
                'V4 20-40(1) cm._FERTILIDADE_V4 20-40 cm': 8,
                'Ca1 0-20 cm._FERTILIDADE_Ca1 0-20 cm': 9,
                'Ca4 20-40 cm._FERTILIDADE_Ca4 20-40 cm': 10,
                'Ca4 20-40(1) cm._FERTILIDADE_Ca4 20-40 cm': 10,
                'Mg1 0-20 cm._FERTILIDADE_Mg1 0-20 cm': 11,
                'K1 0-20 cm._FERTILIDADE_K1 0-20 cm': 12,
                'P_res1 0-20 cm._FERTILIDADE_P_res1 0-20 cm': 13,
                'Al1 0-20 cm._FERTILIDADE_Al1 0-20 cm': 14,
                'Al4 20-40 cm._FERTILIDADE_Al4 20-40 cm': 15,
                'Al4 20-40(1) cm._FERTILIDADE_Al4 20-40 cm': 15,
                'S1 0-20 cm._FERTILIDADE_S1 0-20 cm': 16,
                'S4 20-40 cm._FERTILIDADE_S4 20-40 cm': 17,
                'B1 0-20 cm._FERTILIDADE_B1 0-20 cm': 18,
                'Cu1 0-20 cm._FERTILIDADE_Cu1 0-20 cm': 19,
                'Mn1 0-20 cm._FERTILIDADE_Mn1 0-20 cm': 20,
                'Zn1 0-20 cm._FERTILIDADE_Zn1 0-20 cm': 21,
            }

            MediaPPTAberturaPadrao= {
                'Argila1_0_20': 2,
                'Mo1_0_20': 3,
                'Ctc1_0_20': 4,
                'Ctc4_20_40': 5,
                'Ctc4_20_40(1)': 5,
                'Ph1_0_20': 6,
                'V1_0_20': 7,
                'V4_20_40': 8,
                'V4_20_40(1)': 8,
                'Ca1_0_20': 9,
                'Ca4_20_40': 10,
                'Ca4_20_40(1)': 10,
                'Mg1_0_20': 11,
                'K1_0_20': 12,
                'P_res1_0_20': 13,
                'Al1_0_20': 14,
                'Al4_20_40': 15,
                'Al4_20_40(1)': 15,
                'S1_0_20': 16,
                'S4_20_40': 17,
                'B1_0_20': 18,
                'Cu1_0_20': 19,
                'Mn1_0_20': 20,
                'Zn1_0_20': 21,
            }
            
            def GerarApresentacaoLavoura(padrao=None, modelo = None, empresa = None):
                
               
                
                if padrao == 'PADRAO' and empresa == 'TERRAM' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'TERRAM FERTILIDADE 2023_LAVOURA_PADRAO.pptx'))
                    
                    
                    img = imgPPTLavouraPadrao
                    media = MediaPPTLavouraPadrao
                    saida = 'TerramLavouraPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'TERRAM' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'TERRAM FERTILIDADE 2023_LAVOURA_COMPLETO.pptx'))
                    img = imgPPTLavouraCompleto
                    media = MediaPPTLavouraCompleto
                    saida = 'TerramLavouraCompleto'
                    
                if padrao == 'PADRAO' and empresa == 'TERRAM' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'TERRAM FERTILIDADE 2023_ABERTURA_PADRAO.pptx'))
                    img = imgPPTAberturaPadrao
                    media = MediaPPTAberturaPadrao
                    saida = 'TerramAberturaPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'TERRAM' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'TERRAM FERTILIDADE 2023_ABERTURA_COMPLETO.pptx'))
                    img = imgPPTAberturaCompleto
                    media = MediaPPTAberturaCompleto
                    saida = 'TerramAberturaCompleto'
                
                if padrao == 'PADRAO' and empresa == 'ELO' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'ELO FERTILIDADE 2023_LAVOURA_PADRAO.pptx'))
                    img = imgPPTALavouraPadrao
                    media = MediaPPTLavouraPadrao
                    saida = 'EloLavouraPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'ELO' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'ELO FERTILIDADE 2023_LAVOURA_COMPLETO.pptx'))
                    img = imgPPTLavouraCompleto
                    media = MediaPPTLavouraCompleto
                    saida = 'EloLavouraCompleto'
                    
                if padrao == 'PADRAO' and empresa == 'ELO' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'ELO FERTILIDADE 2023_ABERTURA_PADRAO.pptx'))
                    img = imgPPTAberturaPadrao
                    media = MediaPPTAberturaPadrao
                    saida = 'EloAberturaPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'ELO' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'ELO FERTILIDADE 2023_ABERTURA_COMPLETO.pptx'))
                    img = imgPPTAberturaCompleto
                    media = MediaPPTAberturaCompleto
                    saida = 'EloAberturaCompleto'
                
                if padrao == 'PADRAO' and empresa == 'JP' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'JP FERTILIDADE 2023_ABERTURA_PADRAO.pptx'))
                    img = imgPPTAberturaPadrao
                    media = MediaPPTAberturaPadrao
                    saida = 'JpAberturaPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'JP' and modelo =='ABERTURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'JP FERTILIDADE 2023_ABERTURA_COMPLETO.pptx'))
                    img = imgPPTAberturaCompleto
                    media = MediaPPTAberturaCompleto
                    saida = 'JpAberturaCompleto'
                    
                
                if padrao == 'PADRAO' and empresa == 'JP' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'JP FERTILIDADE 2023_LAVOURA_PADRAO.pptx'))
                    img = imgPPTLavouraPadrao
                    media = MediaPPTLavouraPadrao
                    saida = 'JpLavouraPadrao'
                
                if padrao == 'COMPLETO' and empresa == 'JP' and modelo =='LAVOURA':
                    presentation = Presentation(os.path.join(self.plugin_dir,'JP FERTILIDADE 2023_LAVOURA_COMPLETO.pptx'))
                    img = imgPPTLavouraCompleto
                    media = MediaPPTLavouraCompleto
                    saida = 'JpLavouraCompleto'
                    
                    
                if empresa =='JP':
                    left = Cm(2.0)   # Left position of the image in centimeters
                    top = Cm(2.62)    # Top position of the image in centimeters
                    width = Cm(19.84) # Width of the image in centimeters
                    height = Cm(14.03)
                    
                    left1 = Cm(2.87)   # Left position of the text box in centimeters
                    top1 = Cm(16.34)    # Top position of the text box in centimeters
                    width1 = Cm(1.27)     # Width of the text box in centimeters
                    height1 = Cm(0.77)
                else:
                    left = Cm(5.05)   # Left position of the image in centimeters
                    top = Cm(2.75)    # Top position of the image in centimeters
                    width = Cm(23.76) # Width of the image in centimeters
                    height = Cm(16.8)
                    
                    left1 = Cm(6.34)   # Left position of the text box in centimeters
                    top1 = Cm(16.57)    # Top position of the text box in centimeters
                    width1 = Cm(1.27)     # Width of the text box in centimeters
                    height1 = Cm(0.77)
 
                # Path to the folder containing the images and DBF files
                image_folder = self.pasta
                dbf_folder = self.pasta  # Update this path to your DBF folder

                # Insert images
                for image_name, slide_index in img.items():
                    try:
                        # Handle image insertion
                        image_path = os.path.join(image_folder, f"{image_name}.png")

                        # Check if the image file exists
                        if os.path.exists(image_path):
                            # Select the slide where you want to insert the image
                            slide = presentation.slides[slide_index]

                            left = left   # Left position of the image in centimeters
                            top = top    # Top position of the image in centimeters
                            width = width # Width of the image in centimeters
                            height = height # Height of the image in centimeters
                            slide.shapes.add_picture(image_path, left, top, width, height)
                        else:
                            print(f"Image file not found for: {image_name}. Skipping...")
                    except (FileNotFoundError, OSError):
                        print(f"Error reading file for: {image_name}. Skipping...")
                        continue

                # Calculate mean values and insert text boxes
                for data_name, slide_index in media.items():
                    try:
                        # Handle DBF files for mean calculation
                        dbf_filename = f"{data_name}.dbf"
                        dbf_path = os.path.join(dbf_folder, dbf_filename)

                        # Check if the DBF file exists
                        if os.path.exists(dbf_path):
                            # Read the DBF file and calculate the mean of the fourth column
                            # Lista para armazenar os valores da quarta coluna
                            column_4_values = []

                            # Lendo o arquivo DBF
                            with DBF(dbf_path, encoding='utf-8') as table:
                                # Obtendo o nome da quarta coluna
                                fourth_column_name = list(table.field_names)[3]  # O índice começa em 0, então a quarta coluna é a posição 3.

                                # Iterando sobre os registros do arquivo e armazenando os valores da quarta coluna
                                for record in table:
                                    # Supondo que a quarta coluna contém valores numéricos (caso contrário, ajuste para o tipo de dados correto)
                                    value = record[fourth_column_name]
                                    # Verificando se o valor não é nulo (None) e se é convertível para float
                                    if value is not None and isinstance(value, (int, float)):
                                        column_4_values.append(float(value))

                            # Calculando a média dos valores da quarta coluna
                            mean_value = sum(column_4_values) / len(column_4_values)

                            # Imprimindo a média
                            print("Média da quarta coluna ('{}'): {}".format(fourth_column_name, mean_value))

                            # Select the slide where you want to insert the text
                            slide = presentation.slides[slide_index]

                            left1 = left1   # Left position of the text box in centimeters
                            top1 = top1    # Top position of the text box in centimeters
                            width1 = width1     # Width of the text box in centimeters
                            height1 = height1    # Height of the text box in centimeters

                            # Add a textbox to the slide and insert the mean value as text
                            textbox = slide.shapes.add_textbox(left1, top1, width1, height1)
                            text_frame = textbox.text_frame
                            p = text_frame.add_paragraph()
                            p.text = f"{mean_value:.2f}"  # Display only the mean value with 2 decimal places
                            p.font.size = Pt(12)  # Set the font size to 12 points

                        else:
                            print(f"DBF file not found for: {data_name}. Skipping...")
                    except (FileNotFoundError, OSError):
                        print(f"Error reading file for: {data_name}. Skipping...")
                        continue

                # Save the modifications to the PowerPoint file
               
                pasta_downloads = os.path.expanduser("~") + "/Downloads/"
                caminho_arquivo = os.path.join(pasta_downloads, saida + ".pptx")
                presentation.save(caminho_arquivo)
                
                from PyQt5.QtWidgets import QMessageBox
                # Exibindo a caixa de diálogo após a conclusão da função
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Processo Concluído")
                msg_box.setText("O processo foi finalizado com sucesso!")
                msg_box.setIcon(QMessageBox.Information)
                msg_box.exec_()
               
               

            
        
            
            GerarApresentacaoLavoura(padrao=self.atributo, modelo = self.padrao, empresa = self.empresa) 
        Apresentacao()
    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING GerarApresentacao"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = GerarApresentacaoDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
            self.dockwidget.pushButtonDtu.clicked.connect(self.ExtrairDtu)
            self.dockwidget.pushButtonGerarLayout.clicked.connect(self.GerarLayout)
            self.dockwidget.pushButtonProjeto.clicked.connect(self.SalvarProjetos)
            self.dockwidget.pushButtonImagem.clicked.connect(self.ExportarImagem)
            self.dockwidget.pushButtonGerarApresentacao.clicked.connect(self.GerarApresentacao)
            self.dockwidget.checkBoxLavoura.stateChanged.connect(self.HabilitarCheckBox)
            self.dockwidget.checkBoxAbertura.stateChanged.connect(self.HabilitarCheckBox)
            
